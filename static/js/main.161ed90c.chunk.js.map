{"version":3,"sources":["components/TodoForm.js","components/todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","TodoList","setTodos","test","newTodos","updatedTodos","removeTodoItem","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAsEeA,EApEE,SAACC,GAAU,MAGAC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAHzC,mBAGnBC,EAHmB,KAGZC,EAHY,KAKpBC,EAAWC,iBAAO,MAExBC,qBAAU,WACRF,EAASG,QAAQC,WAInB,IAAMC,EAAe,SAACC,GACpBP,EAASO,EAAEC,OAAOV,QAIdW,EAAe,SAACF,GAEpBA,EAAEG,iBAKFf,EAAMgB,SAAS,CACbC,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAIRC,EAAS,KAGX,OACE,0BAAMW,SAAUF,EAAcQ,UAAU,aACrCtB,EAAME,KACL,oCACE,2BACEqB,YAAY,mBACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLC,IAAKpB,EACLgB,UAAU,oBAEZ,4BAAQK,QAASb,EAAcQ,UAAU,oBAAzC,WAKF,oCACE,2BACEC,YAAY,aACZpB,MAAOC,EACPoB,SAAUb,EACVc,KAAK,OACLH,UAAU,aACVI,IAAKpB,IAEP,4BAAQqB,QAASb,EAAcQ,UAAU,eAAzC,e,cCHKM,EAlDF,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,aAAcC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAAiB,EAExC/B,mBAAS,CAC/BgB,GAAI,KACJd,MAAO,KAJuD,mBAEzDD,EAFyD,KAEnD+B,EAFmD,KAehE,OAAI/B,EAAKe,GACA,kBAAC,EAAD,CAAUf,KAAMA,EAAMc,SATV,SAACb,GACpB6B,EAAW9B,EAAKe,GAAId,GACpB8B,EAAQ,CACNhB,GAAI,KACJd,MAAO,QASJ0B,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACf,yBAEEd,UAAWa,EAAKE,WAAa,oBAAsB,WACnDC,IAAKF,GAEL,yBACEE,IAAKH,EAAKlB,GAEVU,QAAS,kBAAMG,EAAaK,EAAKlB,MAEhCkB,EAAKd,MAIR,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEK,QAAS,kBAAMI,EAAWI,EAAKlB,KAC/BK,UAAU,gBAEZ,kBAAC,IAAD,CAEEK,QAAS,kBAAMM,EAAQ,CAAEhB,GAAIkB,EAAKlB,GAAId,MAAOgC,EAAKd,QAClDC,UAAU,oBCqBLiB,EAnEE,WAAO,IAAD,EACKtC,mBAAS,IADd,mBACd4B,EADc,KACPW,EADO,KAqDrB,OACE,6BACE,0DACA,kBAAC,EAAD,CAAUxB,SApDE,SAACmB,GAGf,GAAKA,EAAKd,OAAQ,QAAQoB,KAAKN,EAAKd,MAApC,CAKA,IAAMqB,EAAQ,CAAIP,GAAJ,mBAAaN,IAG3BW,EAASE,OA0CP,kBAAC,EAAD,CACEb,MAAOA,EACPC,aA3Be,SAACb,GACpB,IAAI0B,EAAed,EAAMK,KAAI,SAACC,GAK5B,OAHIA,EAAKlB,KAAOA,IACdkB,EAAKE,YAAcF,EAAKE,YAEnBF,KAGTK,EAASG,IAmBLZ,WAfa,SAACd,GAGlB,IAAM2B,EAAiB,YAAIf,GAAOgB,QAAO,SAACV,GAAD,OAAUA,EAAKlB,KAAOA,KAE/DuB,EAASI,IAWLZ,WA1Ca,SAACc,EAAQC,GAGrBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI5CmB,GAAS,SAACQ,GAAD,OACPA,EAAKd,KAAI,SAACe,GAAD,OAAWA,EAAKhC,KAAO6B,EAASC,EAAWE,aCnB3CC,MATf,WACE,OAEE,yBAAK5B,UAAU,YACb,kBAAC,EAAD,QCJN6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.161ed90c.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst TodoForm = (props) => {\r\n  // setting state and initializing input to an empty string unless editting\r\n  // then add value to input\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  // setting input to whatever value is being typed\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  // method when clicking \"add todo\" button\r\n  const handleSubmit = (e) => {\r\n    // prevents page from refreshing when you click submit\r\n    e.preventDefault();\r\n\r\n    // props so we can access from todoList component\r\n    // id generator is to reduce chances of matching ids\r\n    // text is set to value of input\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: input,\r\n    });\r\n\r\n    // set input to an empty string after it has been clicked\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"todo-form\">\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder=\"Update your item\"\r\n            value={input}\r\n            onChange={handleChange}\r\n            name=\"text\"\r\n            ref={inputRef}\r\n            className=\"todo-input edit\"\r\n          />\r\n          <button onClick={handleSubmit} className=\"todo-button edit\">\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder=\"Add a todo\"\r\n            value={input}\r\n            onChange={handleChange}\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className=\"todo-button\">\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\n\r\nimport TodoForm from \"./TodoForm\";\r\n\r\n// importing React icons\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  // setting edit state and initializing id and value\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  // this maps out all the todos in the list\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      // using ternary operator to set css class depending if it is complete or not\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div\r\n        key={todo.id}\r\n        // this will allow you to toggle if it is completed or not\r\n        onClick={() => completeTodo(todo.id)}\r\n      >\r\n        {todo.text}\r\n      </div>\r\n\r\n      {/* icon images for edit and delete buttons */}\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className=\"delete-icon\"\r\n        />\r\n        <TiEdit\r\n          // clicking will change edit state\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className=\"edit-icon\"\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\n\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./todo\";\r\n\r\nconst TodoList = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  // method that creates todo and is passed into onSubmit function\r\n  const addTodo = (todo) => {\r\n    // this code ensures that any extra space will not show up in inputs\r\n    // or if there is no text in the input at all\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n\r\n    // this will add new todo to list of todos that were spread out\r\n    const newTodos = [todo, ...todos];\r\n\r\n    // changes state to display all current todos\r\n    setTodos(newTodos);\r\n    // console.log(todo,...todos);\r\n  };\r\n\r\n  const updateTodo = (todoId, newValue) => {\r\n    // this code ensures that any extra space will not show up in inputs\r\n    // or if there is no text in the input at all\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    setTodos((prev) =>\r\n      prev.map((item) => (item.id === todoId ? newValue : item))\r\n    );\r\n  };\r\n\r\n  // method that shows the todo completed\r\n  const completeTodo = (id) => {\r\n    let updatedTodos = todos.map((todo) => {\r\n      // this allows the user to toggle if the todo is completed or not\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n\r\n    setTodos(updatedTodos);\r\n  };\r\n\r\n  // method to delete todo item\r\n  const removeTodo = (id) => {\r\n    // spread out todo list and filter out the id that has been selected\r\n    // then re render the list\r\n    const removeTodoItem = [...todos].filter((todo) => todo.id !== id);\r\n\r\n    setTodos(removeTodoItem);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>What's the plan for today?</h1>\r\n      <TodoForm onSubmit={addTodo} />\r\n      <Todo\r\n        todos={todos}\r\n        completeTodo={completeTodo}\r\n        removeTodo={removeTodo}\r\n        updateTodo={updateTodo}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}